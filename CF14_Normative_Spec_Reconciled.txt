# CHIRALITY FRAMEWORK 14 - RECONCILED NORMATIVE SPECIFICATION v2.1

**Status**: Normative Standard (Reconciled)  
**Ontology**: cf14.core.v2.1  
**Scope**: Technology-neutral semantic operations framework with Neo4j graph implementation  
**Out of Scope**: Implementation details, automated validation, error handling

**Reconciliation Notes**: This specification combines the comprehensive structure of CF14 v2.0 with the practical graph schema from the alternative specification, creating a unified standard suitable for both abstract semantic operations and concrete Neo4j implementations.

---

## 0. OVERVIEW

CF14 is a normative methodology for constructing and traversing a "semantic valley" from Problem Statement to Resolution. This reconciled specification defines:

1. **Ontological Foundations** - Core entities, relationships, and graph schema
2. **Semantic Operations** - Formal mathematical operations on semantic terms  
3. **Station Progression** - 10-stage knowledge transformation pipeline
4. **Data Model** - Abstract schema with concrete graph implementation
5. **Extension Framework** - Domain-specific customization patterns
6. **Implementation Requirements** - Compliance and interoperability standards

**Key Principles:**
- Single resolved term per operation (no confidences/alternates)
- Versioned ontology registry as single source of truth
- UFO integration balanced between metadata annotation and practical graph relationships
- Clean separation of normative core from domain implementations
- Neo4j-optimized graph schema for concrete implementations

---

## 1. ONTOLOGICAL FOUNDATIONS

### 1.1 Core Entity Types

Refer to `ontology/cf14.core.v2.1.json` for complete specifications.

**Primary Entities:**
- `Document` - Complete CF14 execution artifact (UFO: Artifact)
- `Station` - Semantic valley position (UFO: Situation) 
- `Component` - Semantic construct (Matrix/Tensor/Array) (UFO: Endurant)
- `Cell` - Component element (UFO: Mode)
- `Term` - Lexicalized expression (UFO: Mode)
- `SemanticOperation` - Transformation event (UFO: Event)

**Context Entities:**
- `KnowledgeField` - Domain of knowledge (UFO: Kind)
- `ProblemStatement` - Specific problem addressed (UFO: Situation)

### 1.2 Meta-Ontological Framework

The Chirality Framework serves as a meta-ontological, system-agnostic methodology for mapping solution spaces to problem statements in knowledge work contexts. It creates structured semantic relationships that serve as "semantic anchors" to guide Large Language Models through problem-solving processes.

### 1.3 Station Sequence (Canonical)

```
1. Problem Statement  → Axiomatic matrices A, B
2. Requirements      → C = A * B  
3. Objectives        → F = J * C, D = A + F
4. Verification      → X = K * J
5. Validation        → Z (context transformation from X)
6. Evaluation        → E = G * T
7. Assessment        → M = R × E
8. Implementation    → W = M × X  
9. Reflection        → U = W × P
10. Resolution       → N = U × H
```

### 1.4 Foundational Modalities

**Process Modalities (Rows):**
- `Normative` - Standards, principles, frameworks
- `Operative` - Execution, implementation, operations
- `Evaluative` - Assessment, feedback, quality control

**Decision Modalities (Columns):**
- `Necessity` - Essential vs contingent requirements
- `Sufficiency` - Adequacy of resources/capabilities  
- `Completeness` - Comprehensive coverage
- `Consistency` - Coherence across components

**Knowledge Hierarchy (Alternative Rows):**
- `Data` - Raw facts and observations
- `Information` - Contextualized structured data
- `Knowledge` - Understanding from processed information
- `Wisdom` - Judgment and insight applied to knowledge

**Action Modalities (Alternative Columns):**
- `Guiding` - Direction-setting, strategic orientation
- `Applying` - Implementation, execution activities
- `Judging` - Decision-making, evaluation processes  
- `Reviewing` - Assessment, feedback, refinement

---

## 2. SEMANTIC OPERATIONS FORMALISM

### 2.1 Fundamental Operations

#### 2.1.1 Semantic Multiplication (*)

**Definition**: Combine two terms into semantic intersection representing unified meaning.

**Notation**: `*(term₁, term₂) → term`

**Examples**:
- `*("sufficient", "reason") = "justification"`
- `*("analysis", "judgment") = "informed decision"`
- `*("precision", "durability") = "reliability"`

#### 2.1.2 Semantic Addition (+)  

**Definition**: Fuse multiple terms into concatenated expression.

**Notation**: `+(term₁, term₂, ..., termₙ) → term`

**Examples**:
- `+("faisal", "has", "seven", "balloons") = "faisal has seven balloons"`

#### 2.1.3 Semantic Cross Product (×)

**Definition**: Expand semantic framework across dimensional axes.

**Notation**: `Array₁ × Array₂ → Tensor`

**Formula**: `(U × V)[i,j] := *(U[i], V[j])`

### 2.2 Matrix Operations

#### 2.2.1 Semantic Matrix Multiplication 

**Corrected Formula** for `A[3×4] * B[4×4] = C[3×4]`:

```
For i ∈ {1,2,3}, j ∈ {1,2,3,4}:

C[i,j] := +(*(A[i,1], B[1,j]),
            *(A[i,2], B[2,j]), 
            *(A[i,3], B[3,j]),
            *(A[i,4], B[4,j]))
```

**General Pattern**: Each `A[i,k]` pairs with `B[k,j]` exactly once for `k=1..n`.

#### 2.2.2 Element-wise Multiplication

**Formula** for `J[3×4] ⊙ C[3×4] = F[3×4]`:

```
F[i,j] := *(J[i,j], C[i,j])
```

#### 2.2.3 Matrix Addition

**Formula** for `A[3×4] + F[3×4] = D[3×4]`:

```
D[i,j] := +(A[i,j], F[i,j])
```

#### 2.2.4 Matrix Transpose

**Formula** for `A^T`:

```
A^T[j,i] := A[i,j]
```

### 2.3 Operation Precedence

1. **Semantic Multiplication** (`*`) - highest precedence
2. **Semantic Addition** (`+`) 
3. **Semantic Cross Product** (`×`) - lowest precedence

---

## 3. GRAPH SCHEMA (NEO4J IMPLEMENTATION)

### 3.1 Node Types

#### 3.1.1 Core Semantic Entities

**Document**
```
Attributes:
- id: string (UUID)
- name: string
- version: string (SemVer)
- topic: string
- ontology_id: string
- station: integer (1-10)
- created_at: datetime
- metadata: json
```

**Matrix/Tensor/Component**
```
Attributes:
- id: string (UUID)
- document_id: string (foreign key)
- name: string (A, B, C, D, F, J, K, X, Z, E, M, W, U, N)
- kind: enum(matrix, tensor, array)
- station: integer (1-10)
- dimensions: array[integer]
- row_names: array[string]
- column_names: array[string]
- operation_type: enum(axiomatic, multiplication, addition, cross_product, transpose)
```

**Cell**
```
Attributes:
- id: string (UUID)
- component_id: string (foreign key)
- row: integer
- col: integer
- position: array[integer] (row, column indices)
- resolved: string
- raw_terms: array[string]
- operation: string
- semantic_derivation: json
```

**Term**
```
Attributes:
- id: string (UUID)
- value: string
- semantic_role: enum(primitive, derived, composite)
- ontological_category: string
```

#### 3.1.2 Process Tracking Entities

**SemanticOperation**
```
Attributes:
- id: string (UUID)
- type: enum(multiplication, addition, cross_product, transpose)
- input_components: array[string] (component IDs)
- output_component: string (component ID)
- timestamp: datetime
- model_vendor: string
- model_name: string
- model_version: string
- provenance: json
```

**Station**
```
Attributes:
- id: integer (1-10)
- name: string
- description: string
- required_inputs: array[string]
- expected_outputs: array[string]
- validation_rules: json
```

### 3.2 Relationship Types

#### 3.2.1 Structural Relationships
- `(Document)-[:HAS_COMPONENT]->(Component)`
- `(Component)-[:AT_STATION]->(Station)`
- `(Component)-[:HAS_CELL]->(Cell)`
- `(Cell)-[:RESOLVES_TO]->(Term)`
- `(Cell)-[:CONTAINS_TERM]->(Term)`
- `(Component)-[:DERIVED_FROM]->(Component)`

#### 3.2.2 Process Relationships
- `(Component)-[:INPUT_TO]->(SemanticOperation)`
- `(SemanticOperation)-[:PRODUCES]->(Component)`
- `(SemanticOperation)-[:PRODUCES_TERM]->(Term)`
- `(SemanticOperation)-[:DERIVES_CELL]->(Cell)`
- `(SemanticOperation)-[:OCCURS_AT]->(Station)`
- `(Component)-[:POSITIONED_AT]->(Station)`

#### 3.2.3 Semantic Relationships
- `(Term)-[:SEMANTICALLY_MULTIPLIED_WITH]->(Term)`
- `(Term)-[:SEMANTICALLY_ADDED_TO]->(Term)`
- `(Term)-[:SEMANTIC_INTERSECTION_OF]->(Term)`
- `(Cell)-[:SEMANTIC_DERIVATION]->(Cell)`

### 3.3 Required Provenance

Every `SemanticOperation` must record:
- **Exact model metadata**: vendor, name, version (as published)
- **Operation timestamp**: ISO 8601 format
- **Input terms**: All operands used
- **Output term**: Single resolved result
- **Cell derivation**: Target cell(s) affected

---

## 4. CANONICAL COMPONENT SPECIFICATIONS

### 4.1 Axiomatic Matrices

#### Matrix A (Problem Statement)
- **Dimensions**: 3×4
- **Station**: Problem Statement  
- **Rows**: [Normative, Operative, Evaluative]
- **Columns**: [Guiding, Applying, Judging, Reviewing]
- **Type**: Axiomatic (domain-specific content)

#### Matrix B (Decision Framework)  
- **Dimensions**: 4×4
- **Station**: Problem Statement
- **Rows**: [Data, Information, Knowledge, Wisdom]
- **Columns**: [Necessity, Sufficiency, Completeness, Consistency]
- **Type**: Axiomatic (domain-specific content)

### 4.2 Derived Matrices

#### Matrix C (Requirements)
- **Formula**: `C = A * B`
- **Dimensions**: 3×4
- **Station**: Requirements
- **Operation**: Semantic matrix multiplication

#### Matrix J (Truncated Decisions)
- **Formula**: `J = B[1:3, :]` (first 3 rows of B)
- **Dimensions**: 3×4  
- **Station**: Objectives
- **Operation**: Truncation

#### Matrix F (Objectives)
- **Formula**: `F = J ⊙ C` (element-wise multiplication)
- **Dimensions**: 3×4
- **Station**: Objectives  
- **Operation**: Element-wise semantic multiplication

#### Matrix D (Solution Objectives)
- **Formula**: `D = A + F` 
- **Dimensions**: 3×4
- **Station**: Objectives
- **Operation**: Matrix addition

---

## 5. EXTENSION FRAMEWORK

### 5.1 Domain Pack Structure

Domain-specific implementations use separate ontology files:

```
domain/
├── software_engineering/
│   └── cf14.domain.software_eng.v1.0.json
├── business_strategy/ 
│   └── cf14.domain.business.v1.0.json
└── research_methods/
    └── cf14.domain.research.v1.0.json
```

### 5.2 Domain Pack Schema

```json
{
  "id": "cf14.domain.{name}.v{X}.{Y}",
  "extends": "cf14.core.v2.1",
  "domain": "domain_name",
  "axiomatic_matrices": {
    "A": {"cells": [...]},
    "B": {"cells": [...]}
  },
  "custom_arrays": {...},
  "graph_extensions": {
    "additional_node_types": [...],
    "additional_relationships": [...],
    "domain_specific_attributes": {...}
  },
  "validation_overrides": {...}
}
```

### 5.3 Runtime Composition

Implementations must:
1. Load core ontology (`cf14.core.v2.1.json`)
2. Load domain pack (`cf14.domain.{name}.v{X}.{Y}.json`)  
3. Validate compatibility (`extends` field)
4. Merge schemas with domain pack precedence for content
5. Extend graph schema with domain-specific nodes/relationships
6. Execute operations using combined ontology

### 5.4 Custom Operation Registration

```
CustomOperation {
  name: String
  signature: (InputType[], OutputType)
  implementation: Function
  validation_rules: Rule[]
  graph_impact: GraphSchemaExtension
}
```

---

## 6. INTEGRATION RULES

### 6.1 Normative vs Domain-Specific Separation

#### 6.1.1 Normative Framework (Core)
- Contains axiomatic matrices (e.g., A and B) derived from ontological primitives
- Defines strict semantic operations with formal mathematical and ontological grounding
- Station progression and validation rules are invariant and universally applicable
- Maintains meta-ontological relationships and semantic provenance
- Provides foundational modalities and semantic operation algorithms
- UFO integration as metadata annotation for conceptual clarity

#### 6.1.2 Domain-Specific Implementations
- Extend normative axioms with domain-specific deliverables (e.g., Array R topics)
- Contextualize problem statements and validation criteria to domain needs
- Adapt output formats and quality metrics for specific use cases
- Implement domain-specific semantic operations and extensions while preserving normative core integrity
- Practical graph relationships for concrete Neo4j implementations

### 6.2 UFO Integration Approach (Balanced)

**Metadata Annotation Level** (from v2.0):
- Core entities annotated with UFO classifications for semantic clarity
- Clean separation between CF14 operations and UFO theoretical framework
- UFO mappings stored in ontology metadata, not operational logic

**Practical Graph Relationships** (from alternative):
- Graph schema optimized for Neo4j implementation
- UFO concepts inform relationship design but don't constrain operations
- Semantic relationships complement UFO theoretical foundation

---

## 7. VALIDATION REQUIREMENTS

### 7.1 Structural Validation

- **Matrix Dimensions**: Operations must respect dimensional constraints
- **Station Sequence**: Components created in sequential station order
- **Ontology Compliance**: All entities reference valid ontology version
- **Graph Integrity**: Neo4j relationships maintain referential integrity

### 7.2 Semantic Validation  

- **Operation Provenance**: Every derived term links to `SemanticOperation`
- **Model Metadata**: Complete vendor/name/version for all operations
- **Single Resolution**: One resolved term per operation (no alternates)
- **Graph Consistency**: Semantic relationships align with operational results

### 7.3 Domain Validation

- **Axiomatic Completeness**: Matrices A and B fully specified
- **Modality Alignment**: Row/column labels match ontological modalities
- **Content Consistency**: Terms align with domain context
- **Extension Compatibility**: Domain packs validate against core version

---

## 8. IMPLEMENTATION REQUIREMENTS

### 8.1 Minimum Implementation

Any CF14 implementation must support:
- Ontology registry loading and validation
- Semantic multiplication, addition operations  
- Matrix operations for A×B→C pipeline
- Provenance recording with model metadata
- Domain pack loading and composition
- Basic graph schema (if using graph database)

### 8.2 Neo4j Implementation Requirements

CF14 Neo4j implementations must additionally support:
- Full graph schema as defined in Section 3
- Cypher queries for semantic relationship traversal
- Graph-based provenance tracking
- Relationship-based validation rules
- Domain-specific graph extensions

### 8.3 Reference Implementation

See companion document: `CF14_Implementation_Guide_Python_NextJS.txt`

### 8.4 Compliance Testing

Implementations must pass:
- **Ontology Validation**: Load and validate `cf14.core.v2.1.json`
- **Operation Tests**: Execute canonical A×B→C with known inputs
- **Provenance Tests**: Record complete operation metadata
- **Domain Pack Tests**: Load and merge domain-specific ontologies
- **Graph Schema Tests**: Create and query Neo4j graph structures (if applicable)

---

## 9. VERSION COMPATIBILITY

### 9.1 Semantic Versioning

- **Major**: Core ontological framework changes, graph schema breaking changes
- **Minor**: Semantic operation enhancements, additive graph schema changes
- **Patch**: Bug fixes, clarifications

### 9.2 Backward Compatibility

- Core operations maintain interface compatibility within major versions
- Graph schema changes are additive (new nodes/relationships, additional attributes)
- Domain packs specify minimum core version requirements
- Implementation must validate ontology version compatibility
- Migration paths provided for graph schema upgrades

---

## APPENDIX A: MATHEMATICAL CORRECTIONS

### A.1 Fixed Matrix Multiplication Formula

**Previous Error** (CF14 v1):
```
C[1,4] = A[1,1]*B[1,4] + A[1,2]*B[2,4] + A[1,3]*B[3,4] + A[1,3]*B[4,4]
                                                           ↑ wrong index
```

**Corrected** (CF14 v2+):
```
C[1,4] = A[1,1]*B[1,4] + A[1,2]*B[2,4] + A[1,3]*B[3,4] + A[1,4]*B[4,4]
                                                           ↑ correct index
```

### A.2 General Formula Verification

For any `A[m×n] * B[n×p] = C[m×p]`:
```
C[i,j] = Σ(k=1 to n) *(A[i,k], B[k,j])
```

Where each `A[i,k]` pairs with exactly one `B[k,j]` for each `k`.

---

## APPENDIX B: RECONCILIATION CHANGELOG

### v2.1 Reconciliation Changes

1. **Primary Structure**: Adopted comprehensive v2.0 specification structure
2. **Graph Schema Integration**: Merged Neo4j-optimized graph schema from alternative
3. **Balanced UFO Integration**: Combined metadata annotation approach with practical relationships
4. **Extended Framework**: Retained v2.0 extension framework with graph schema extensions
5. **Enhanced Implementation**: Added Neo4j-specific implementation requirements
6. **Unified Validation**: Combined structural, semantic, and graph integrity validation

**Compatibility**: Fully backward compatible with CF14 v2.0 implementations. Neo4j-specific features are additive and optional.

---

**END OF RECONCILED NORMATIVE SPECIFICATION**