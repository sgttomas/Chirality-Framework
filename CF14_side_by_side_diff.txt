--- CF14_Normative_Spec.txt
+++ CF14_Normative_Spec_(alt).txt
@@ -1,420 +1,285 @@
-# CHIRALITY FRAMEWORK 14 - NORMATIVE SPECIFICATION v2.0

-

-**Status**: Normative Standard  

-**Ontology**: cf14.core.v2.0  

-**Scope**: Technology-neutral semantic operations framework  

-**Out of Scope**: Implementation details, automated validation, error handling

+CF14_Normative_Spec.txt

+

+# CHIRALITY FRAMEWORK 14 - NORMATIVE SPECIFICATION

 

 ---

 

-## 0. OVERVIEW

-

-CF14 is a normative methodology for constructing and traversing a "semantic valley" from Problem Statement to Resolution. This specification defines:

-

-1. **Ontological Foundations** - Core entities and relationships

-2. **Semantic Operations** - Formal mathematical operations on semantic terms  

-3. **Station Progression** - 10-stage knowledge transformation pipeline

-4. **Data Model** - Abstract schema for semantic components

-5. **Extension Framework** - Domain-specific customization patterns

-

-**Key Principles:**

-- Single resolved term per operation (no confidences/alternates)

-- Versioned ontology registry as single source of truth

-- UFO integration as metadata annotation only

-- Clean separation of normative core from domain implementations

-

----

-

-## 1. ONTOLOGICAL FOUNDATIONS

-

-### 1.1 Core Entity Types

-

-Refer to `ontology/cf14.core.v2.0.json` for complete specifications.

-

-**Primary Entities:**

-- `Document` - Complete CF14 execution artifact (UFO: Artifact)

-- `Station` - Semantic valley position (UFO: Situation) 

-- `Component` - Semantic construct (Matrix/Tensor/Array) (UFO: Endurant)

-- `Cell` - Component element (UFO: Mode)

-- `Term` - Lexicalized expression (UFO: Mode)

-- `SemanticOperation` - Transformation event (UFO: Event)

-

-**Context Entities:**

-- `KnowledgeField` - Domain of knowledge (UFO: Kind)

-- `ProblemStatement` - Specific problem addressed (UFO: Situation)

-

-### 1.2 Station Sequence (Canonical)

-

-```

-1. Problem Statement  → Axiomatic matrices A, B

-2. Requirements      → C = A * B  

-3. Objectives        → F = J * C, D = A + F

-4. Verification      → X = K * J

-5. Validation        → Z (context transformation from X)

-6. Evaluation        → E = G * T

-7. Assessment        → M = R × E

-8. Implementation    → W = M × X  

-9. Reflection        → U = W × P

-10. Resolution       → N = U × H

-```

-

-### 1.3 Foundational Modalities

-

-**Process Modalities (Rows):**

-- `Normative` - Standards, principles, frameworks

-- `Operative` - Execution, implementation, operations

-- `Evaluative` - Assessment, feedback, quality control

-

-**Decision Modalities (Columns):**

-- `Necessity` - Essential vs contingent requirements

-- `Sufficiency` - Adequacy of resources/capabilities  

-- `Completeness` - Comprehensive coverage

-- `Consistency` - Coherence across components

-

-**Knowledge Hierarchy (Alternative Rows):**

-- `Data` - Raw facts and observations

-- `Information` - Contextualized structured data

-- `Knowledge` - Understanding from processed information

-- `Wisdom` - Judgment and insight applied to knowledge

-

-**Action Modalities (Alternative Columns):**

-- `Guiding` - Direction-setting, strategic orientation

-- `Applying` - Implementation, execution activities

-- `Judging` - Decision-making, evaluation processes  

-- `Reviewing` - Assessment, feedback, refinement

-

----

-

-## 2. SEMANTIC OPERATIONS FORMALISM

-

-### 2.1 Fundamental Operations

-

-#### 2.1.1 Semantic Multiplication (*)

-

-**Definition**: Combine two terms into semantic intersection representing unified meaning.

-

-**Notation**: `*(term₁, term₂) → term`

-

-**Examples**:

-- `*("sufficient", "reason") = "justification"`

-- `*("analysis", "judgment") = "informed decision"`

-- `*("precision", "durability") = "reliability"`

-

-#### 2.1.2 Semantic Addition (+)  

-

-**Definition**: Fuse multiple terms into concatenated expression.

-

-**Notation**: `+(term₁, term₂, ..., termₙ) → term`

-

-**Examples**:

-- `+("faisal", "has", "seven", "balloons") = "faisal has seven balloons"`

-

-#### 2.1.3 Semantic Cross Product (×)

-

-**Definition**: Expand semantic framework across dimensional axes.

-

-**Notation**: `Array₁ × Array₂ → Tensor`

-

-**Formula**: `(U × V)[i,j] := *(U[i], V[j])`

-

-### 2.2 Matrix Operations

-

-#### 2.2.1 Semantic Matrix Multiplication 

-

-**Corrected Formula** for `A[3×4] * B[4×4] = C[3×4]`:

-

-```

-For i ∈ {1,2,3}, j ∈ {1,2,3,4}:

-

-C[i,j] := +(*(A[i,1], B[1,j]),

-            *(A[i,2], B[2,j]), 

-            *(A[i,3], B[3,j]),

-            *(A[i,4], B[4,j]))

-```

-

-**General Pattern**: Each `A[i,k]` pairs with `B[k,j]` exactly once for `k=1..n`.

-

-#### 2.2.2 Element-wise Multiplication

-

-**Formula** for `J[3×4] ⊙ C[3×4] = F[3×4]`:

-

-```

-F[i,j] := *(J[i,j], C[i,j])

-```

-

-#### 2.2.3 Matrix Addition

-

-**Formula** for `A[3×4] + F[3×4] = D[3×4]`:

-

-```

-D[i,j] := +(A[i,j], F[i,j])

-```

-

-#### 2.2.4 Matrix Transpose

-

-**Formula** for `A^T`:

-

-```

-A^T[j,i] := A[i,j]

-```

-

-### 2.3 Operation Precedence

-

-1. **Semantic Multiplication** (`*`) - highest precedence

-2. **Semantic Addition** (`+`) 

-3. **Semantic Cross Product** (`×`) - lowest precedence

-

----

-

-## 3. CANONICAL COMPONENT SPECIFICATIONS

-

-### 3.1 Axiomatic Matrices

-

-#### Matrix A (Problem Statement)

-- **Dimensions**: 3×4

-- **Station**: Problem Statement  

-- **Rows**: [Normative, Operative, Evaluative]

-- **Columns**: [Guiding, Applying, Judging, Reviewing]

-- **Type**: Axiomatic (domain-specific content)

-

-#### Matrix B (Decision Framework)  

-- **Dimensions**: 4×4

-- **Station**: Problem Statement

-- **Rows**: [Data, Information, Knowledge, Wisdom]

-- **Columns**: [Necessity, Sufficiency, Completeness, Consistency]

-- **Type**: Axiomatic (domain-specific content)

-

-### 3.2 Derived Matrices

-

-#### Matrix C (Requirements)

-- **Formula**: `C = A * B`

-- **Dimensions**: 3×4

-- **Station**: Requirements

-- **Operation**: Semantic matrix multiplication

-

-#### Matrix J (Truncated Decisions)

-- **Formula**: `J = B[1:3, :]` (first 3 rows of B)

-- **Dimensions**: 3×4  

-- **Station**: Objectives

-- **Operation**: Truncation

-

-#### Matrix F (Objectives)

-- **Formula**: `F = J ⊙ C` (element-wise multiplication)

-- **Dimensions**: 3×4

-- **Station**: Objectives  

-- **Operation**: Element-wise semantic multiplication

-

-#### Matrix D (Solution Objectives)

-- **Formula**: `D = A + F` 

-- **Dimensions**: 3×4

-- **Station**: Objectives

-- **Operation**: Matrix addition

-

----

-

-## 4. DATA MODEL (ABSTRACT)

-

-### 4.1 Core Schema

-

-```

-Document {

-  id: UUID

-  version: SemVer

-  topic: String

-  ontology_id: String

-  created_at: DateTime

-}

-

-Component {

-  id: UUID  

-  name: String

-  kind: Enum(matrix, tensor, array)

-  station: String

-  dimensions: Integer[]

-  operation_type: Enum(axiomatic, multiplication, addition, cross_product, transpose)

-}

-

-Cell {

-  row: Integer

-  col: Integer  

-  resolved: String

-  operation: String

-}

-

-SemanticOperation {

-  type: Enum(multiplication, addition, cross_product)

-  timestamp: DateTime

-  model_vendor: String

-  model_name: String

-  model_version: String

-}

-```

-

-### 4.2 Relationship Schema

-

-```

-Document --HAS_COMPONENT--> Component

-Component --AT_STATION--> Station  

-Component --HAS_CELL--> Cell

-Cell --RESOLVES_TO--> Term(resolved)

-Cell --CONTAINS_TERM--> Term(raw)

-SemanticOperation --PRODUCES_TERM--> Term(resolved)

-SemanticOperation --DERIVES_CELL--> Cell

-```

-

-### 4.3 Required Provenance

-

-Every `SemanticOperation` must record:

-- **Exact model metadata**: vendor, name, version (as published)

-- **Operation timestamp**: ISO 8601 format

-- **Input terms**: All operands used

-- **Output term**: Single resolved result

-- **Cell derivation**: Target cell(s) affected

-

----

-

-## 5. EXTENSION FRAMEWORK

-

-### 5.1 Domain Pack Structure

-

-Domain-specific implementations use separate ontology files:

-

-```

-domain/

-├── software_engineering/

-│   └── cf14.domain.software_eng.v1.0.json

-├── business_strategy/ 

-│   └── cf14.domain.business.v1.0.json

-└── research_methods/

-    └── cf14.domain.research.v1.0.json

-```

-

-### 5.2 Domain Pack Schema

-

+## 1. ONTOLOGY DEFINITION

+

+### 1.1 Core Meta-Ontological Framework

+

+The Chirality Framework is a meta-ontological, system-agnostic methodology for mapping solution spaces to problem statements in knowledge work contexts. It creates structured semantic relationships that serve as "semantic anchors" to guide Large Language Models through problem-solving processes.

+

+### 1.2 Ontological Modalities

+

+#### 1.2.1 Process Modalities (Rows)

+- **Normative**: Standards, principles, and guiding frameworks

+- **Operative**: Execution, implementation, and operational activities  

+- **Evaluative**: Assessment, feedback, and quality control mechanisms

+

+#### 1.2.2 Decision Modalities (Columns)

+- **Necessity vs Contingency**: Essential vs optional requirements

+- **Sufficiency**: Adequacy of resources, information, or capabilities

+- **Completeness**: Comprehensive coverage of all required elements

+- **Consistency**: Coherence and harmony across all components

+

+#### 1.2.3 Knowledge Hierarchy (Alternative Row Modality)

+- **Data**: Raw facts and observations

+- **Information**: Contextualized and structured data

+- **Knowledge**: Understanding derived from information processing

+- **Wisdom**: Judgment and insight applied to knowledge

+

+#### 1.2.4 Action Modalities (Alternative Column Modality)

+- **Guiding**: Direction-setting and strategic orientation

+- **Applying**: Implementation and execution activities

+- **Judging**: Decision-making and evaluation processes

+- **Reviewing**: Assessment, feedback, and refinement activities

+

+### 1.3 Semantic Valley Progression Stations

+

+The framework follows a logical progression through ten stations, each representing a stage in the semantic problem-solving process:

+

+1. **Problem Statement** (Matrices A, B)

+2. **Requirements** (Matrix C = A * B)

+3. **Objectives** (Matrix D = A + F)  

+4. **Verification** (Matrix X = K * J)

+5. **Validation** (Matrix Z, transformed from X)

+6. **Evaluation** (Matrix E = G * T)

+7. **Assessment** (Tensor M = R × E)

+8. **Implementation** (Tensor W = M × X)

+9. **Reflection** (Tensor U = W × P)

+10. **Resolution** (Tensor N = U × H)

+

+### 1.4 Ontology Metadata and Versioning

+

+The normative ontology includes metadata for alignment with external ontologies such as UFO (Unified Foundational Ontology), enabling semantic interoperability.

+

+**Example Versioned Ontology Registry (JSON):**

 ```json

 {

-  "id": "cf14.domain.{name}.v{X}.{Y}",

-  "extends": "cf14.core.v2.0",

-  "domain": "domain_name",

-  "axiomatic_matrices": {

-    "A": {"cells": [...]},

-    "B": {"cells": [...]}

-  },

-  "custom_arrays": {...},

-  "validation_overrides": {...}

+    "ontology_registry": {

+        "version": "14.2.0",

+        "date": "2024-06-01",

+        "domains_supported": ["general", "software_engineering", "healthcare"],

+        "modalities": {

+            "process": ["normative", "operative", "evaluative"],

+            "decision": ["necessity", "sufficiency", "completeness", "consistency"],

+            "knowledge_hierarchy": ["data", "information", "knowledge", "wisdom"],

+            "action": ["guiding", "applying", "judging", "reviewing"]

+        },

+        "external_mappings": {

+            "UFO": "https://ufo.example.org/ontology/v1"

+        }

+    }

 }

-```

-

-### 5.3 Runtime Composition

-

-Implementations must:

-1. Load core ontology (`cf14.core.v2.0.json`)

-2. Load domain pack (`cf14.domain.{name}.v{X}.{Y}.json`)  

-3. Validate compatibility (`extends` field)

-4. Merge schemas with domain pack precedence for content

-5. Execute operations using combined ontology

-

-### 5.4 Custom Operation Registration

-

-```

-CustomOperation {

-  name: String

-  signature: (InputType[], OutputType)

-  implementation: Function

-  validation_rules: Rule[]

-}

-```

-

----

-

-## 6. VALIDATION REQUIREMENTS

-

-### 6.1 Structural Validation

-

-- **Matrix Dimensions**: Operations must respect dimensional constraints

-- **Station Sequence**: Components created in sequential station order

-- **Ontology Compliance**: All entities reference valid ontology version

-

-### 6.2 Semantic Validation  

-

-- **Operation Provenance**: Every derived term links to `SemanticOperation`

-- **Model Metadata**: Complete vendor/name/version for all operations

-- **Single Resolution**: One resolved term per operation (no alternates)

-

-### 6.3 Domain Validation

-

-- **Axiomatic Completeness**: Matrices A and B fully specified

-- **Modality Alignment**: Row/column labels match ontological modalities

-- **Content Consistency**: Terms align with domain context

-

----

-

-## 7. IMPLEMENTATION REQUIREMENTS

-

-### 7.1 Minimum Implementation

-

-Any CF14 implementation must support:

-- Ontology registry loading and validation

-- Semantic multiplication, addition operations  

-- Matrix operations for A×B→C pipeline

-- Provenance recording with model metadata

-- Domain pack loading and composition

-

-### 7.2 Reference Implementation

-

-See companion document: `CF14_Implementation_Guide_Python_NextJS.txt`

-

-### 7.3 Compliance Testing

-

-Implementations must pass:

-- **Ontology Validation**: Load and validate `cf14.core.v2.0.json`

-- **Operation Tests**: Execute canonical A×B→C with known inputs

-- **Provenance Tests**: Record complete operation metadata

-- **Domain Pack Tests**: Load and merge domain-specific ontologies

-

----

-

-## 8. VERSION COMPATIBILITY

-

-### 8.1 Semantic Versioning

-

-- **Major**: Core ontological framework changes

-- **Minor**: Semantic operation enhancements  

-- **Patch**: Bug fixes, clarifications

-

-### 8.2 Backward Compatibility

-

-- Core operations maintain interface compatibility within major versions

-- Domain packs specify minimum core version requirements

-- Implementation must validate ontology version compatibility

-

----

-

-## APPENDIX A: MATHEMATICAL CORRECTIONS

-

-### A.1 Fixed Matrix Multiplication Formula

-

-**Previous Error** (CF14 v1):

-```

-C[1,4] = A[1,1]*B[1,4] + A[1,2]*B[2,4] + A[1,3]*B[3,4] + A[1,3]*B[4,4]

-                                                           ↑ wrong index

-```

-

-**Corrected** (CF14 v2):

-```

-C[1,4] = A[1,1]*B[1,4] + A[1,2]*B[2,4] + A[1,3]*B[3,4] + A[1,4]*B[4,4]

-                                                           ↑ correct index

-```

-

-### A.2 General Formula Verification

-

-For any `A[m×n] * B[n×p] = C[m×p]`:

-```

-C[i,j] = Σ(k=1 to n) *(A[i,k], B[k,j])

-```

-

-Where each `A[i,k]` pairs with exactly one `B[k,j]` for each `k`.

-

----

-

-**END OF NORMATIVE SPECIFICATION**
+

+

+⸻

+

+2. SEMANTIC OPERATIONS FORMALISM

+

+2.1 Fundamental Semantic Operations

+

+Semantic operations define the mathematical and conceptual manipulation of semantic entities.

+

+2.1.1 Semantic Multiplication (*)

+

+Semantic multiplication resolves the meaning of terms by combining their semantic intersection into a coherent concept representing the unified meaning.

+

+Definition:

+A * B = semantic_intersection(A, B)

+

+Examples:

+	•	“sufficient” * “reason” = “justification”

+	•	“analysis” * “judgment” = “informed decision”

+	•	“precision” * “durability” = “reliability”

+	•	“probability” * “consequence” = “risk”

+

+2.1.2 Semantic Addition (+)

+

+Semantic addition concatenates words or sentence fragments to form longer statements while preserving individual semantic components.

+

+Definition:

+A + B = concatenate(A, B)

+

+Example:

+“faisal” + “has” + “seven” + “balloons” = “faisal has seven balloons”

+

+2.1.3 Semantic Cross Product (×)

+

+Semantic cross product generates new dimensions of meaning by applying one semantic framework to another, creating tensors that capture multi-dimensional relationships.

+

+Definition:

+A × B = apply_framework(A, B)

+

+2.2 Matrix Operations

+

+2.2.1 Semantic Matrix Multiplication

+

+Given matrices [A] (m×n) and [B] (n×p), the resulting matrix [C] (m×p) is calculated as:

+

+C(i,j) = Σ(k=1 to n) A(i,k) * B(k,j)

+

+Corrected Formula for 3×4 result from 3×4 and 4×4 matrices:

+

+For i ∈ {1,2,3}, j ∈ {1,2,3,4}:

+C(i,j) = A(i,1) * B(1,j) + A(i,2) * B(2,j) + A(i,3) * B(3,j) + A(i,4) * B(4,j)

+

+2.2.2 Matrix Transpose

+

+The transpose operation swaps rows and columns while preserving semantic relationships:

+

+A^T(i,j) = A(j,i)

+

+2.3 Order of Operations

+

+Semantic operations must be executed according to the following precedence:

+	1.	First: Semantic multiplication (*)

+	2.	Second: Semantic addition (+)

+	3.	Third: Semantic cross product (×)

+

+2.4 Provenance Requirements

+

+All semantic operations and resulting matrices/tensors must be annotated with provenance metadata to ensure traceability and reproducibility.

+

+Provenance Fields:

+	•	Vendor (e.g., tool or framework name)

+	•	Model (e.g., LLM or algorithm version)

+	•	Version (specific software or ontology version)

+	•	Timestamp (operation execution datetime)

+

+⸻

+

+3. GRAPH SCHEMA

+

+3.1 Node Types

+

+3.1.1 Core Semantic Entities

+	•	Document

+Attributes:

+	•	id: string (UUID)

+	•	name: string

+	•	station: integer (1-10)

+	•	created_at: datetime

+	•	metadata: json

+	•	Matrix/Tensor

+Attributes:

+	•	id: string (UUID)

+	•	document_id: string (foreign key)

+	•	name: string (A, B, C, D, F, J, K, X, Z, E, M, W, U, N)

+	•	station: integer (1-10)

+	•	dimensions: array[integer]

+	•	row_names: array[string]

+	•	column_names: array[string]

+	•	operation_type: enum (axiomatic, multiplication, addition, cross_product, transpose)

+	•	Cell

+Attributes:

+	•	id: string (UUID)

+	•	matrix_id: string (foreign key)

+	•	position: array[integer] (row, column indices)

+	•	resolved_term: string

+	•	raw_terms: array[string]

+	•	semantic_derivation: json

+	•	Term

+Attributes:

+	•	id: string (UUID)

+	•	value: string

+	•	semantic_role: enum (primitive, derived, composite)

+	•	ontological_category: string

+

+3.1.2 Process Tracking Entities

+	•	SemanticOperation

+Attributes:

+	•	id: string (UUID)

+	•	operation_type: enum (multiplication, addition, cross_product, transpose)

+	•	input_matrices: array[string] (matrix IDs)

+	•	output_matrix: string (matrix ID)

+	•	timestamp: datetime

+	•	provenance: json

+	•	Station

+Attributes:

+	•	id: integer (1-10)

+	•	name: string

+	•	description: string

+	•	required_inputs: array[string]

+	•	expected_outputs: array[string]

+	•	validation_rules: json

+

+3.2 Relationship Types

+

+3.2.1 Structural Relationships

+	•	(Document)-[:CONTAINS]->(Matrix)

+	•	(Matrix)-[:HAS_CELL]->(Cell)

+	•	(Cell)-[:CONTAINS_TERM]->(Term)

+	•	(Matrix)-[:DERIVED_FROM]->(Matrix) [via SemanticOperation]

+

+3.2.2 Process Relationships

+	•	(Matrix)-[:INPUT_TO]->(SemanticOperation)

+	•	(SemanticOperation)-[:PRODUCES]->(Matrix)

+	•	(SemanticOperation)-[:OCCURS_AT]->(Station)

+	•	(Matrix)-[:POSITIONED_AT]->(Station)

+

+3.2.3 Semantic Relationships

+	•	(Term)-[:SEMANTICALLY_MULTIPLIED_WITH]->(Term)

+	•	(Term)-[:SEMANTICALLY_ADDED_TO]->(Term)

+	•	(Term)-[:SEMANTIC_INTERSECTION_OF]->(Term)

+	•	(Cell)-[:SEMANTIC_DERIVATION]->(Cell)

+

+⸻

+

+4. DATA FLOW & PIPELINE (CONCEPTUAL)

+

+4.1 Framework Overview

+

+The Chirality Framework conceptualizes a semantic processing pipeline that transforms problem domain specifications into structured semantic matrices and tensors through a sequence of stations. Each station corresponds to a semantic operation or transformation step.

+

+4.2 Processing Pipeline

+	1.	Input: Problem domain specification, axiomatic primitives, and initial semantic matrices.

+	2.	Semantic Operations: Execution of normative semantic operations (multiplication, addition, cross product, transpose) across stations.

+	3.	Provenance Annotation: All generated semantic entities and operations are annotated with provenance metadata.

+	4.	Validation: Semantic entities and operations are validated against ontological constraints and station-specific rules.

+	5.	Integration: Normative semantic structures are combined with domain-specific extensions as needed.

+

+⸻

+

+5. INTEGRATION RULES

+

+5.1 Normative vs Domain-Specific Separation

+

+The framework distinguishes between the Normative Framework (Core) and Domain-Specific Implementations to maintain clarity and modularity.

+

+5.1.1 Normative Framework (Core)

+	•	Contains axiomatic matrices (e.g., A and B) derived from ontological primitives.

+	•	Defines strict semantic operations with formal mathematical and ontological grounding.

+	•	Station progression and validation rules are invariant and universally applicable.

+	•	Maintains meta-ontological relationships and semantic provenance.

+	•	Provides foundational modalities and semantic operation algorithms.

+

+5.1.2 Domain-Specific Implementations

+	•	Extend normative axioms with domain-specific deliverables (e.g., Array R topics).

+	•	Contextualize problem statements and validation criteria to domain needs.

+	•	Adapt output formats and quality metrics for specific use cases.

+	•	Implement domain-specific semantic operations and extensions while preserving normative core integrity.

+

+5.2 Provenance Metadata

+

+All normative and domain-specific semantic operations must include explicit provenance metadata, minimally including:

+	•	Vendor (tool or ontology provider)

+	•	Model (algorithm or LLM version)

+	•	Version (software or ontology version)

+	•	Timestamp (operation execution datetime)

+

+5.3 Versioning and Compatibility

+

+The framework follows semantic versioning:

+	•	Major: Core ontological framework revisions.

+	•	Minor: Enhancements to semantic operations and formalism.

+	•	Patch: Bug fixes and implementation improvements.

+

+Backward compatibility is maintained by additive graph schema changes and stable semantic operation interfaces. Domain implementations declare minimum framework version requirements to ensure compatibility.

+

+⸻

+

+END OF CF14 NORMATIVE SPECIFICATION

+

+---
